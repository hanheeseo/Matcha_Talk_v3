# Matcha-Talk 개발 도우미 지침

## 프로젝트 정보
- GitHub: https://github.com/hanheeseo/Matcha_Talk_v3
- 브랜치: 아직 없음
- 스택: Spring Boot 3.3.2 + Vue 3 + Vuetify 3

## 역할
- Matcha-Talk 웹서비스 풀스택 개발
- 코드 작성, 수정, 리뷰 전부
- GitHub 통한 직접 작업 수행
- 핵심기능은 랜덤채팅(텍스트 번역 파파고 api사용), 영상채팅(websocket,webrtc)

## 현재 상태
- 기본 회원가입 및 로그인 기능 구현
- 텍스트 채팅을 위한 백엔드 기본 기능 구현 완료

## 구현된 기능

### 백엔드
- **프로젝트 구조**: Spring Boot 기본 패키지 구조 (controller, service, repository 등) 설정
- **데이터베이스**: H2 인메모리 DB 설정
- **보안**: Spring Security 의존성 추가 및 기본 설정 (`permitAll`, `PasswordEncoder` 등록)
- **회원가입 API**: `POST /api/users/register`
- **로그인 API**: `POST /api/users/login`
- **아이디 중복 확인 API**: `GET /api/users/exists`
- **텍스트 채팅 백엔드**:
  - WebSocket 및 STOMP 의존성 추가 및 기본 설정 (`WebSocketConfig`)
  - 실시간 메시지 처리를 위한 컨트롤러 구현 (`ChatController`)
  - 채팅방 생성 및 조회를 위한 REST API 구현 (`ChatRoomController`)
  - DTO (`ChatMessage`, `ChatRoom`) 및 인메모리 저장소 구현 (`ChatRoomRepository`)

### 프론트엔드
- **프로젝트 구조**: Vue 3 + Vite 기반 프로젝트 생성 (`/frontend/app`)
- **UI 라이브러리**: Vuetify 3 설정 완료
- **상태 관리**: Pinia 설정 완료
- **API 통신**: `axios` 설치 및 `Vite` 프록시 설정 완료
- **화면 구현**:
  - 메인 페이지 (`HomeView`)
  - 회원가입 페이지 (`RegisterView`)
  - 로그인 페이지 (`LoginView`)
  - Vuetify 레이아웃 시스템 (`v-app`)을 사용한 전체 앱 레이아웃 구조 설정

## 다음 진행할 내용
- **프론트엔드 채팅 기능 구현**:
  - 채팅방 목록 조회 및 생성 페이지 구현
  - WebSocket 클라이언트 라이브러리 설치 (e.g., `stompjs`, `sockjs-client`)
  - 실시간 채팅 페이지 구현 (메시지 송수신)
- **영상 채팅** 기능 구현 (WebRTC 기반)

## 추후 구현할 내용
- **이메일 인증** 기능 구현 (프론트엔드 + 백엔드)
- **JWT 기반 인증** 도입하여 로그인 상태 유지
- **schema.sql** 기반 나머지 Entity 및 API 구현

## 주요 설정 파일
- **백엔드**:
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\build.gradle`
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\src\main\resources\application.properties`
- **프론트엔드**:
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app\vite.config.ts`
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app\src\main.ts`
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app\src\router\index.ts`

## 실행 명령어
- **백엔드**: `C:\Users\shh06\project-gemini\Matcha_Talk_v3` 경로에서 `./gradlew bootRun` 실행
- **프론트엔드**: `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app` 경로에서 `npm run dev` 실행

## 데이터베이스 정보
- **종류**: H2 In-Memory Database
- **H2 Console URL**: `http://localhost:8080/h2-console`
- **JDBC URL**: `jdbc:h2:mem:testdb`
- **Username**: `sa`
- **Password**: (없음)

## 작업 방식
-  코드에 관련한 질문을 받고 코드 블록을 내놓을 때에는 작성 후 한 번 더 사용자에게 알릴 것
- 실용적이고 production-ready한 코드 작성
- 한국어로 친근하게 소통
- **프론트엔드는 항상 백엔드의 구조를 우선하여 작업**

## TODO
- **로그인 상태 관리**: 현재 로그인 성공 시 프론트엔드에서만 상태를 `true`로 변경. 추후 JWT 도입 시 토큰 기반으로 변경 필요.