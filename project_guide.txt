# Matcha-Talk 개발 도우미 지침

## 프로젝트 정보
- GitHub: https://github.com/hanheeseo/Matcha_Talk_v3
- 브랜치: 아직 없음
- 스택: Spring Boot 3.3.2 + Vue 3 + Vuetify 3

## 역할
- Matcha-Talk 웹서비스 풀스택 개발
- 코드 작성, 수정, 리뷰 전부
- GitHub 통한 직접 작업 수행
- 핵심기능은 랜덤채팅(텍스트 번역 파파고 api사용), 영상채팅(websocket,webrtc)

## 현재 상태
- 기본 회원가입 및 로그인 기능 구현
- 기본 텍스트 채팅 기능 (백엔드 + 프론트엔드) 구현 완료
- **기본 영상 채팅 기능 (수동 수락/거절 포함) 전체 흐름 구현 완료**

## 구현된 기능

### 백엔드
- **프로젝트 구조**: Spring Boot 기본 패키지 구조 (controller, service, repository 등) 설정
- **데이터베이스**: H2 인메모리 DB 설정
- **보안**: Spring Security 의존성 추가 및 기본 설정 (`permitAll`, `PasswordEncoder` 등록)
- **회원가입/로그인 API**: `/api/users/**` 경로의 REST API 구현
- **텍스트 채팅 백엔드**:
  - WebSocket 및 STOMP 의존성 추가 및 CORS, 컴파일러 설정 완료
  - 실시간 메시지 처리를 위한 컨트롤러 구현 (`ChatController`)
  - 채팅방 생성 및 조회를 위한 REST API 구현 (`ChatRoomController`)
  - DTO (`ChatMessage`, `ChatRoom`) 및 인메모리 저장소 구현 (`ChatRoomRepository`)
- **영상 채팅 백엔드 (WebRTC 시그널링)**:
  - STOMP 메시지 핸들러(`/app/signal`)를 통해 WebRTC 시그널링(offer, answer, candidate) 메시지를 중계하는 기능 구현
  - STOMP 연결 시 커스텀 헤더(`username`)를 통해 사용자를 식별할 수 있도록 `StompHandler` 및 `WebSocketConfig` 설정
  - 디버깅 과정에서 특정 사용자 간 메시지 전송이 실패함에 따라, 임시로 공개 토픽(`/topic/signal/{username}`)을 사용하도록 수정하여 문제 해결

### 프론트엔드
- **프로젝트 구조**: Vue 3 + Vite 기반 프로젝트 생성 (`/frontend/app`)
- **UI 라이브러리**: Vuetify 3 설정 완료 및 `Tree-shaking` 문제 해결
- **상태 관리**: Pinia 설정 완료
- **API 통신**: `axios` 설치 및 `Vite` 프록시, `baseURL` 설정 완료 (`/api/api` 중복 호출 버그 수정)
- **화면 구현**:
  - 메인 페이지 (`HomeView`), 회원가입 (`RegisterView`), 로그인 (`LoginView`)
  - Vuetify 레이아웃 시스템 (`v-app`)을 사용한 전체 앱 레이아웃 구조 설정
- **텍스트 채팅 프론트엔드**:
  - WebSocket 클라이언트 라이브러리 (`SockJS`, `STOMP.js`) 설치 및 `vite.config.js` 설정
  - 채팅방 목록 조회 및 생성 페이지 구현 (`ChatListView`)
  - 실시간 채팅방 페이지 구현 (`ChatRoomView`) - WebSocket 연결, 메시지 송수신 UI
  - 채팅 관련 라우팅 설정 (`/chat`, `/chat/:roomId`)
- **영상 채팅 프론트엔드 (WebRTC)**:
  - `ChatRoomView`의 레이아웃을 개편하여 영상(좌)과 텍스트(우) 영역을 분리.
  - WebRTC 관련 로직을 `useWebRTC` 컴포저블로 분리 (STUN 서버 설정 포함)
  - STOMP 채팅 관련 로직을 `useStompChat` 컴포저블로 분리.
  - STOMP를 통해 WebRTC 시그널링 메시지를 교환하는 전체 흐름 구현 (백엔드와 `payload` 필드명 불일치 문제 수정)
  - **통화 수신 시, '자동 수락' 대신 사용자에게 수락/거절을 선택할 수 있는 팝업 UI 구현**
  - 영상 통화 제어 UI 및 기능 구현 (통화 시작, 음소거/해제, 종료).
  - 채팅 관련 타입(`ChatMessage`, `SignalMessage` 등)을 `types/chat.ts` 파일로 분리하여 관리.

## 다음 진행할 내용
- **시그널링 채널 보안 강화**: 현재 디버깅을 위해 사용 중인 공개 토픽 방식(`/topic/signal`)을 다시 비공개 채널 방식(`/user/queue/signal`)으로 되돌리고, 안정적으로 동작하도록 `SimpUserRegistry` 관련 설정 문제 해결.
- **이메일 인증** 기능 구현 (프론트엔드 + 백엔드)
- **JWT 기반 인증** 도입하여 로그인 상태 유지

## 추후 구현할 내용
- **schema.sql** 기반 나머지 Entity 및 API 구현

## 주요 디버깅 기록
- **`@Payload` 컴파일 오류**: `build.gradle`에 의존성이 있음에도 불구, IDE 및 터미널에서 `@Payload` 어노테이션을 찾지 못하는 문제 발생. 원인은 `ChatController.java` 파일 내 `import` 구문 누락으로 확인되어 해결.
- **시그널링 메시지 전송 실패**: STOMP `username` 헤더로 사용자를 식별했음에도 `convertAndSendToUser` 메소드가 특정 사용자에게 메시지를 전달하지 못하는 문제 발생. 원인 규명을 위해 임시로 공개 토픽(`/topic/signal/{username}`)을 사용하도록 우회하여 해결.
- **'하이젠버그(Heisenbug)' 현상**: 시그널링이 정상 동작하는 로그가 확인됨에도 불구, 최종적으로 영상이 표시되지 않는 문제 발생. `onconnectionstatechange` 로그를 추가하자 문제가 해결됨. WebRTC의 비동기 처리 과정에서의 미세한 타이밍 변화로 문제가 해결된 것으로 추정.

## 주요 설정 파일
- **백엔드**:
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\build.gradle`
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\src\main\resources\application.properties`
- **프론트엔드**:
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app\vite.config.ts`
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app\src\main.ts`
  - `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app\src\router\index.ts`

## 실행 명령어
- **백엔드**: `C:\Users\shh06\project-gemini\Matcha_Talk_v3` 경로에서 `gradlew.bat bootRun` 실행 (Windows) 또는 `./gradlew bootRun` 실행 (Linux/Mac)
- **프론트엔드**: `C:\Users\shh06\project-gemini\Matcha_Talk_v3\frontend\app` 경로에서 `npm run dev` 실행

## 데이터베이스 정보
- **종류**: H2 File-based Database (서버 재시작 시 데이터 유지)
- **H2 Console URL**: `http://localhost:8080/h2-console`
- **JDBC URL**: `jdbc:h2:file:./data/matcha-talk-db`
- **Username**: `sa`
- **Password**: (없음)

## 작업 방식
-  코드에 관련한 질문을 받고 코드 블록을 내놓을 때에는 작성 후 한 번 더 사용자에게 알릴 것
- 실용적이고 production-ready한 코드 작성
- 한국어로 친근하게 소통
- **프론트엔드는 항상 백엔드의 구조를 우선하여 작업**

## TODO
- **로그인 상태 관리**: 현재 로그인 성공 시 프론트엔드에서만 상태를 `true`로 변경. 추후 JWT 도입 시 토큰 기반으로 변경 필요.